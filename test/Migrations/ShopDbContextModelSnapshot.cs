// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using test.Data;

namespace ShopAPISourceCode.Migrations
{
    [DbContext(typeof(ShopDbContext))]
    partial class ShopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CategorieProduct", b =>
                {
                    b.Property<int>("CategorieProductsProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductCategoriesCategorieId")
                        .HasColumnType("int");

                    b.HasKey("CategorieProductsProductId", "ProductCategoriesCategorieId");

                    b.HasIndex("ProductCategoriesCategorieId");

                    b.ToTable("CategorieProduct");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressCounty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressHome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AddressPostalCode")
                        .HasColumnType("float");

                    b.Property<string>("AddressState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AddressUserUserId")
                        .HasColumnType("int");

                    b.HasKey("AddressId");

                    b.HasIndex("AddressUserUserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CartCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CartStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CartUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CartUserUserId")
                        .HasColumnType("int");

                    b.HasKey("CartId");

                    b.HasIndex("CartUserUserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CartItemCartCartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CartItemCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CartItemProductOptionId")
                        .HasColumnType("int");

                    b.Property<int?>("CartItemProductProductId")
                        .HasColumnType("int");

                    b.Property<int>("CartItemQuantity")
                        .HasColumnType("int");

                    b.Property<string>("CartItemStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CartItemUpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartItemCartCartId");

                    b.HasIndex("CartItemProductOptionId");

                    b.HasIndex("CartItemProductProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.Categorie", b =>
                {
                    b.Property<int>("CategorieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Categorie")
                        .HasColumnType("int");

                    b.Property<string>("CategorieImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategorieMetaTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategorieTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategorieId");

                    b.HasIndex("Categorie");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ImageProductOptionId")
                        .HasColumnType("int");

                    b.Property<int?>("ImageProductProductId")
                        .HasColumnType("int");

                    b.Property<string>("ImagesUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId");

                    b.HasIndex("ImageProductOptionId");

                    b.HasIndex("ImageProductProductId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.Like", b =>
                {
                    b.Property<int>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LikeDateTimeAdded")
                        .HasColumnType("datetime2");

                    b.Property<int>("LikeProductProductId")
                        .HasColumnType("int");

                    b.Property<int>("LikeUserUserId")
                        .HasColumnType("int");

                    b.HasKey("LikeId");

                    b.HasIndex("LikeProductProductId");

                    b.HasIndex("LikeUserUserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.Meta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Context")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Meta");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.Notice", b =>
                {
                    b.Property<int>("NoticeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("NoticeDateTimeAdded")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NoticeProductProductId")
                        .HasColumnType("int");

                    b.Property<int?>("NoticeUserUserId")
                        .HasColumnType("int");

                    b.HasKey("NoticeId");

                    b.HasIndex("NoticeProductProductId");

                    b.HasIndex("NoticeUserUserId");

                    b.ToTable("Notices");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<DateTime>("DiscountEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DiscountStrt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("OrderCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("OrderMoneySaved")
                        .HasColumnType("float");

                    b.Property<double>("OrderPayingPrice")
                        .HasColumnType("float");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OrderTotal")
                        .HasColumnType("float");

                    b.Property<DateTime>("OrderUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrderUserUserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("OrderUserUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("OrderItemCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrderItemOrderOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderItemProductOptionId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderItemProductProductId")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemQuantity")
                        .HasColumnType("int");

                    b.Property<string>("OrderItemStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderItemUpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderItemOrderOrderId");

                    b.HasIndex("OrderItemProductOptionId");

                    b.HasIndex("OrderItemProductProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ReviewContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReviewProductProductId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewRating")
                        .HasColumnType("int");

                    b.Property<int>("ReviewStatus")
                        .HasColumnType("int");

                    b.Property<string>("ReviewTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReviewUserUserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("ReviewProductProductId");

                    b.HasIndex("ReviewUserUserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.Spec", b =>
                {
                    b.Property<int>("SpecId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("SpecKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecProductId")
                        .HasColumnType("int");

                    b.Property<string>("SpecVlaue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecId");

                    b.HasIndex("ProductId");

                    b.ToTable("Spec");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TagContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagMetaTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TagProductsProductId")
                        .HasColumnType("int");

                    b.Property<string>("TagSlug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.HasIndex("TagProductsProductId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TransactionContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TransactionOrderOrderId")
                        .HasColumnType("int");

                    b.Property<double>("TransactionPaidPrice")
                        .HasColumnType("float");

                    b.Property<string>("TransactionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TransactionUserUserId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("TransactionOrderOrderId");

                    b.HasIndex("TransactionUserUserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("test.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProductAnalysis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductBrand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("test.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("UserPhone")
                        .HasColumnType("float");

                    b.Property<string>("UserRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("UserSSN")
                        .HasColumnType("float");

                    b.Property<string>("UserUserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CategorieProduct", b =>
                {
                    b.HasOne("test.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("CategorieProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopAPISourceCode.Models.Categorie", null)
                        .WithMany()
                        .HasForeignKey("ProductCategoriesCategorieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.Address", b =>
                {
                    b.HasOne("test.Models.User", "AddressUser")
                        .WithMany("UserAddresses")
                        .HasForeignKey("AddressUserUserId");

                    b.Navigation("AddressUser");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.Cart", b =>
                {
                    b.HasOne("test.Models.User", "CartUser")
                        .WithMany()
                        .HasForeignKey("CartUserUserId");

                    b.Navigation("CartUser");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.CartItem", b =>
                {
                    b.HasOne("ShopAPISourceCode.Models.Cart", "CartItemCart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartItemCartCartId");

                    b.HasOne("ShopAPISourceCode.Models.Option", "CartItemProductOption")
                        .WithMany()
                        .HasForeignKey("CartItemProductOptionId");

                    b.HasOne("test.Models.Product", "CartItemProduct")
                        .WithMany()
                        .HasForeignKey("CartItemProductProductId");

                    b.Navigation("CartItemCart");

                    b.Navigation("CartItemProduct");

                    b.Navigation("CartItemProductOption");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.Categorie", b =>
                {
                    b.HasOne("ShopAPISourceCode.Models.Categorie", "CategorieParent")
                        .WithMany()
                        .HasForeignKey("Categorie");

                    b.Navigation("CategorieParent");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.Image", b =>
                {
                    b.HasOne("ShopAPISourceCode.Models.Option", "ImageProductOption")
                        .WithMany()
                        .HasForeignKey("ImageProductOptionId");

                    b.HasOne("test.Models.Product", "ImageProduct")
                        .WithMany()
                        .HasForeignKey("ImageProductProductId");

                    b.Navigation("ImageProduct");

                    b.Navigation("ImageProductOption");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.Like", b =>
                {
                    b.HasOne("test.Models.Product", "LikeProduct")
                        .WithMany("ProductLikes")
                        .HasForeignKey("LikeProductProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("test.Models.User", "LikeUser")
                        .WithMany("UserLikes")
                        .HasForeignKey("LikeUserUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LikeProduct");

                    b.Navigation("LikeUser");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.Meta", b =>
                {
                    b.HasOne("test.Models.Product", "Product")
                        .WithMany("ProductMetas")
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.Notice", b =>
                {
                    b.HasOne("test.Models.Product", "NoticeProduct")
                        .WithMany()
                        .HasForeignKey("NoticeProductProductId");

                    b.HasOne("test.Models.User", "NoticeUser")
                        .WithMany()
                        .HasForeignKey("NoticeUserUserId");

                    b.Navigation("NoticeProduct");

                    b.Navigation("NoticeUser");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.Option", b =>
                {
                    b.HasOne("test.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.Order", b =>
                {
                    b.HasOne("test.Models.User", "OrderUser")
                        .WithMany()
                        .HasForeignKey("OrderUserUserId");

                    b.Navigation("OrderUser");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.OrderItem", b =>
                {
                    b.HasOne("ShopAPISourceCode.Models.Order", "OrderItemOrder")
                        .WithMany("OrderOrderItems")
                        .HasForeignKey("OrderItemOrderOrderId");

                    b.HasOne("ShopAPISourceCode.Models.Option", "OrderItemProductOption")
                        .WithMany()
                        .HasForeignKey("OrderItemProductOptionId");

                    b.HasOne("test.Models.Product", "OrderItemProduct")
                        .WithMany()
                        .HasForeignKey("OrderItemProductProductId");

                    b.Navigation("OrderItemOrder");

                    b.Navigation("OrderItemProduct");

                    b.Navigation("OrderItemProductOption");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.Review", b =>
                {
                    b.HasOne("test.Models.Product", "ReviewProduct")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ReviewProductProductId");

                    b.HasOne("test.Models.User", "ReviewUser")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewUserUserId");

                    b.Navigation("ReviewProduct");

                    b.Navigation("ReviewUser");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.Spec", b =>
                {
                    b.HasOne("test.Models.Product", null)
                        .WithMany("ProductSpecs")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.Tag", b =>
                {
                    b.HasOne("test.Models.Product", "TagProducts")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagProductsProductId");

                    b.Navigation("TagProducts");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.Transaction", b =>
                {
                    b.HasOne("ShopAPISourceCode.Models.Order", "TransactionOrder")
                        .WithMany()
                        .HasForeignKey("TransactionOrderOrderId");

                    b.HasOne("test.Models.User", "TransactionUser")
                        .WithMany()
                        .HasForeignKey("TransactionUserUserId");

                    b.Navigation("TransactionOrder");

                    b.Navigation("TransactionUser");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ShopAPISourceCode.Models.Order", b =>
                {
                    b.Navigation("OrderOrderItems");
                });

            modelBuilder.Entity("test.Models.Product", b =>
                {
                    b.Navigation("ProductMetas");

                    b.Navigation("ProductReviews");

                    b.Navigation("ProductSpecs");

                    b.Navigation("ProductTags");

                    b.Navigation("ProductLikes");
                });

            modelBuilder.Entity("test.Models.User", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("UserAddresses");

                    b.Navigation("UserLikes");
                });
#pragma warning restore 612, 618
        }
    }
}
